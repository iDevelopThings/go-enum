{{- /*gotype: github.com/iDevelopThings/go-enum/codegen.Enum */ -}}

{{- $Name := .DefinedName }}
{{- $NewType := .GeneratedName }}
{{- $ListVariable := .GenEnumListName }}
{{- $ListVariableTypeName := printf "_type%s" $ListVariable }}

/**
 * Generated from enum:
 * {{$Name}}
 */

{{/* @formatter:off */ -}}
type {{.GenInstanceVariable}}JsonDescriptionModel struct {
    Name string `json:"name"`
    Description string `json:"description"`
}
{{- /* @formatter:on */}}


{{- /* @formatter:off */}}
type {{$NewType}} struct {
    name  string
    value string
    description string
}
{{- /* @formatter:on */}}

func (e {{$NewType}}) Name() string {
return e.name
}

func (e {{$NewType}}) String() string {
return e.Name()
}

func (e {{$NewType}}) Value() string {
return e.value
}

func (e {{$NewType}}) Description() string {
return e.description
}

// Define the `list` type for the enums
type _type{{ $ListVariable }} struct {
{{- range $e := .Values}}
    {{$Name}} {{$NewType}}
{{- end}}
}

// Define the `list` variable for the enums
// This is only here to provide some "namespaced" access to the enum instances
var {{ $ListVariable }} = &{{$ListVariableTypeName}} {
{{- range .Values}}
    {{$Name}}: {{$NewType}}{name: "{{$Name}}", value: "{{.Value}}", description: "{{.Description}}"},
{{- end}}
}

{{ $EnumListMap := printf "_enum%sMap" $ListVariable}}

var {{$EnumListMap}} = map[string]{{$NewType}}{
{{- range .Values}}
    "{{$Name}}": {{$ListVariable}}.{{$Name}},
{{- end}}
}
{{ $EnumValuesArr := printf "_enum%sArr" $ListVariable}}

var {{$EnumValuesArr}} = []{{$NewType}}{
{{- range .Values}}
    {{$ListVariable}}.{{$Name}},
{{- end}}
}


func (list *{{$ListVariableTypeName}}) GetMap() map[string]{{$NewType}} {
return {{$EnumListMap}}
}
func (list *{{$ListVariableTypeName}}) GetAll() []{{$NewType}} {
return {{$EnumValuesArr}}
}
